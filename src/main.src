package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"os/exec"

	"github.com/gobuffalo/packr"
)

func main() {
	box := packr.NewBox("PLACEHOLDER_FOLDER")
	args := os.Args[1:]
	if !box.Has("PLACEHOLDER_SCRIPT") {
		log.Fatalf("Specified Script \"%s\" does not exist", "PLACEHOLDER_SCRIPT")
	}
	if err := runScript(box, "PLACEHOLDER_SCRIPT", args); err != nil {
		log.Fatalf("Error running %s", err)
	}
}

func runScript(box packr.Box, path string, args []string) error {

	tmpfile, _ := createTmpFile(box, path)
	defer os.Remove(tmpfile.Name()) // clean up

	cmd := exec.Command(tmpfile.Name(), args...)
	var stdout, stderr []byte
	var errStdout, errStderr error
	stdoutIn, _ := cmd.StdoutPipe()
	stderrIn, _ := cmd.StderrPipe()
	cmd.Start()

	go func() {
		stdout, errStdout = copyAndCapture(os.Stdout, stdoutIn)
	}()

	go func() {
		stderr, errStderr = copyAndCapture(os.Stderr, stderrIn)
	}()
	err := cmd.Wait()
	if err != nil {
		log.Fatalf("cmd.Run() failed with %s\n", err)
	}
	if errStdout != nil || errStderr != nil {
		log.Fatalf("failed to capture stdout or stderr\n")
	}
	errStr := string(stderr)
	if errStr != "" {
		fmt.Printf("Error: %s\n", errStr)
	}

	return nil

}

func createTmpFile(box packr.Box, script string) (*os.File, error) {
	content := box.Bytes(script)
	tmpfile, err := ioutil.TempFile("", script)
	if err != nil {
		log.Fatal(err)
	}

	if _, err := tmpfile.Write(content); err != nil {
		log.Fatal(err)
	}

	if err := os.Chmod(tmpfile.Name(), 0700); err != nil {
		log.Fatal(err)
	}
	if err := tmpfile.Close(); err != nil {
		log.Fatal(err)
	}

	return tmpfile, nil

}

func copyAndCapture(w io.Writer, r io.Reader) ([]byte, error) {
	var out []byte
	buf := make([]byte, 1024, 1024)
	for {
		n, err := r.Read(buf[:])
		if n > 0 {
			d := buf[:n]
			out = append(out, d...)
			_, err := w.Write(d)
			if err != nil {
				return out, err
			}
		}
		if err != nil {
			// Read returns io.EOF at the end of file, which is not an error for us
			if err == io.EOF {
				err = nil
			}
			return out, err
		}
	}
}
